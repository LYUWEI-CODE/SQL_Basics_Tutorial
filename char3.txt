# 第3章 聚合与排序

## 3-1 对表进行聚合查询

- 通过SQL对数据进行某种操作或计算时需要使用**函数**

- 5个常用函数：

	- COUNT：计算表中的记录数（行数）
	- SUM：计算表中数值列中数据的合计值
	- AVG：计算表中数值列中数据的平均值
	- MAX：求出表中任意列中数据的最大值
	- MIN：求出表中任意列中数据的最小值

- 如上所示，用于汇总的函数称为**聚合函数**或者**聚集函数**

- **聚合**，就是将多行汇总一行

- 计算表中数据的行数

	```mysql
	use shop_demo;
	
	select count(*)  -- *为参数(parameter)
	from product;
	```

- 计算NULL之外的数据的行数

	```mysql
	use shop_demo;
	
	select count(purchase_price)
	from product;
	```

	- **对于COUNT函数来说，参数列不同计算的结果也会发生变化**

	- COUNT函数的结果根据参数的不同而不同。COUNT(*)会得到包含NULL的数据
		行数，而COUNT(<列名>)会得到NULL之外的数据行数

- 计算合计值

	- 计算销售单价的合计值

		```mysql
		use shop_demo;
		
		select sum(sale_price)
		from product;
		```

	- 计算销售单价和进货单价的合计值

		```mysql
		use shop_demo;
		
		select sum(sale_price), sum(purchase_price)
		from product;
		```

	- 聚合函数会将NULL排除在外。但COUNT(*)例外，并不会排除NULL

- 计算平均值

	- 计算销售单价的平均值

		```mysql
		use shop_demo;
		
		select avg(sale_price)
			from product;
		```

	- 计算销售单价和进货单价的平均值

		```mysql
		use shop_demo;
		
		select avg(sale_price), avg(purchase_price)
			from product;
		```

- 计算最大值和最小值

	- 计算销售单价的最大值和进货单价的最小值

		```mysql
		use shop_demo;
		
		select max(sale_price), min(purchase_price)
			from product;
		```

	- 计算登记日期的最大值和最小值

	- 

		```mysql
		use shop_demo;
		
		select max(regist_date), min(regist_date)
			from product;
		```

	- MAX/MIN 函数和SUM/AVG 函数有一点不同，那就是SUM/AVG 函数只能对数值类型的列使用，而**MAX/MIN 函数原则上可以适用于任何数据类型的列**

- 使用聚合函数删除重复值（关键字DISTINCT)

	- 计算去除重复数据后的数据行数

		```mysql
		use shop_demo;
		
		select count(distinct product_type)
			from product;
		```

	- 想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT

	- 使不使用DISTINCT时的动作差异（SUM函数）

		```mysql
		use shop_demo;
		
		select sum(sale_price), sum(distinct sale_price)
			from product;
		```

	- 在聚合函数的参数中使用DISTINCT，可以删除重复数据

## 3-2 对表进行分组

- GROUP BY子句

	- 使用GROUP BY子句进行汇总

		```mysql
		USE shop_demo;
		
		SELECT product_type, COUNT(*)
		FROM product
		GROUP BY product_type;
		```

	- 在GROUP BY子句中指定的列称为**聚合键**或者**分组列**

	- GROUP BY子句和SELECT子句一样，可以通过逗号分隔指定多列

	- GROUP BY 子句的书写位置也有严格要求，一定要写在FROM 语句之后（如果有WHERE 子句的话需要写在WHERE 子句之后）

- 聚合键中包含NULL的情况

	- 按照进货单价统计数据行数

		```mysql
		USE shop_demo;
		
		SELECT purchase_price, COUNT(*)
		FROM product
		GROUP BY purchase_price;
		```

	- 聚合键中包含NULL时，在结果中会以“不确定”行（空行）的形式表现出来

- 使用WHERE子句时GROUP BY的执行结果

	- 同时使用WHERE子句和GROUP BY子句进行汇总处理

		```mysql
		use shop_demo;
		
		select purchase_price, count(*)
		from product
		where product_type = '衣服'
		group by purchase_price
		```
		
	- GROUP BY和WHERE并用时SELECT语句的执行顺序：
	  FROM–>WHERE–>GROUP BY–>SELECT
	
	- 在SQL语句中，书写顺序和DBMS内部的执行顺序并不相同，这也是SQL难以理解的原因之一
	
- 与聚合函数和GROUP BY子句有关的常见错误

  - 在SELECT子句中书写了多余的列

    ```mysql
    use shop_demo;
    
    select product_name, purchase_price, count(*)
    from product
    group by purchase_price
    ```

  - 列名product_name并没有包含在group by子句中。因此，该列名也不能书写在select子句之中

  - 通过某个聚合键将表分组之后，结果中的一行数据就代表一组。例如，使用进货单价将表进行分组之后，一行就代表了一个进货单价。问题就出在这里，聚合键和商品名**并不一定是一对一的**

- 在group by子句中写了列的别名

  ```mysql
  use shop_demo;
  
  select product_type as pt, count(*)
  from product
  group by pt
  ```

  - 标准 SQL 中，`GROUP BY`子句不能使用`SELECT`中定义的别名。但MySQL 在某些场合下**容忍**在 `GROUP BY` 中使用 `SELECT` 中的别名。这是 MySQL 的“宽松语法”特性之一，便于开发但**不具备跨数据库兼容性**

- group by子句的结果能排序吗

  - GROUP BY子句结果的显示是**无序**的

- 在WHERE子句中使用聚合函数

  ```mysql
  use shop_demo;
  
  select product_type, count(*)
  from product
  where count(*) = 2
  group by product_type
  ```

  - 只有select子句和having子句（以及之后将要学到的order by子句）中能够只用count等聚合函数

## 3-3 为聚合结果指定条件

- HAVING子句

	- HAVING 子句必须写在GROUP BY 子句之后，其在DBMS 内部的
		执行顺序也排在GROUP BY 子句之后

	- 使用HAVING 子句时SELECT 语句的顺序：SELECT → FROM → WHERE → GROUP BY → HAVING

	- 从按照商品种类进行分组后的结果中，取出“包含的数据行数为2行”的组

		```mysql
		use shop_demo;
		
		select product_type, count(*)
		from product
		group by product_type
		having count(*) = 2;
		```

	- 不使用having子句的情况

		```mysql
		use shop_demo;
		
		select product_type, count(*)
		from product
		group by product_type;
		```

	- 使用having子句设定条件的情况

		```mysql
		use shop_demo;
		
		select product_type, avg(sale_price)
		from product
		group by product_type;
		having avg(sale_price) >= 2500;
		```

- having子句的构成要素

	- 要素
	- 聚合函数
	- group by子句中指定的列名（即聚合键）

- 相对于having子句，更适合写在WHERE子句中的条件

	- WHERE 子句 = 指定行所对应的条件
		HAVING 子句 = 指定组所对应的条件

## 3-4 对查询结果进行排序

- order by语句

	- 通常，从表中抽取数据时，如果没有特别指定顺序，最终排列顺序便无从得知。即使是同一条SELECT 语句，每次执行时排列顺序很可能发生改变

	- 要通过在SELECT 语句末尾添加**ORDER BY**子句来明确指定排列顺序

		```mysql
		use shop_demo;
		
		select product_id, product_name, sale_price, purchase_price
		from product
		order by sale_price;
		```

	- 不论何种情况，order by子句都需要写在select语句的末尾

	- order by子句中书写的列名称为**排序键**

	- 子句的书写顺序：1.SELECT 子句 → 2.FROM 子句 → 3.HERE 子句 → 4. GROUP BY 子句 →5.HAVING 子句 → 6.ORDER BY 子句

- 指定升序或降序

	- 按照销售单价由高到低（降序）进行排序，在列明后面使用**DESC关键字**

		```mysql
		use shop_demo;
		
		select product_id, product_name, sale_price, purchase_price
		from product
		order by sale_price desc;
		```

	- 使用升序进行排序时，正式的书写方式应该是使用关键字**ASC**，但是省略该关键字时会默认使用升序进行排序

	- ASC，ascendent（上升的）
		DESC，descendent（下降的）

- 指定多个排序键

	- 相同价格的商品的顺序并没有特别指定，或者可以说是**随机**排序的

	- 如果想要对该顺序的商品进行更细致的排序的话，就需要添加一个排序键

	- 按照销售单价和商品编号的升序进行排序

		```mysql
		use shop_demo;
		
		select product_id, product_name, sale_price, purchase_price
		from product
		order by sale_price, product_id;
		```

- NULL的顺序

	- 排序键中包含NULL时，会在开头或末尾进行汇总

- 在排序键中使用显示用的别名

	- 在order by子句中允许使用别名的

		```mysql
		use shop_demo;
		
		select product_id as id, product_name, sale_price as sp, purchase_price
		from product
		order by sp, id;
		```

	- SELECT子句的执行顺序==在GROUP BY 子句之后，ORDER BY 子句之前==

- order by子句中可以使用列

	- select子句中未包含的列也可以在order by子句中使用

		```mysql
		use shop_demo;
		
		select product_name, sale_price, purchase_price
		from product
		order by product_id;
		```

	- order by子句中也可以使用聚合函数

		```mysql
		use shop_demo;
		
		select product_type, count(*)
		from product
		group by product_type
		order by count(*);
		```

- 不要使用列编号

	- 在order by子句中，还可以使用在select子句中出现的列所对应的编号，**列编号**是指select子句中列按照从左到右的顺序进行排列时所对应的编号（1，2，3，……）

		```mysql
		-- 通过列名指定
		use shop_demo;
		
		select product_id, product_name, sale_price, purchase_price
		from product
		order by sale_price desc, product_id;
		```

		```mysql
		-- 通过编号指定
		use shop_demo;
		
		select product_id, product_name, sale_price, purchase_price
		from product
		order by 3 desc, 1;
		```

	- 虽然列编号使用起来非常方便，但是并不推荐使用，原因有以下两点：
		**1.代码阅读起来比较难**
		**2.在SQL-92中已经明确指出该排序功能将来会删除**