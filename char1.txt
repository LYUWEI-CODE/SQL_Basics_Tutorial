# 第1章 数据库和SQL

## 1-1 数据库是什么

- 将大量**数据**保存起来，通过计算机加工而成的可以进行高效访问的数据集合称为**数据库**(Datebase, DB)
- 用来管理数据库的计算机系统称为**数据库管理系统(Datebase Management System, DBMS)**
- 传统管理数据的方法（如文本文件、电子制表软件）虽然非常简便，但是也有不足：
	- 无法多人共享数据
	- 无法提供操作大量数据的格式
	- 实现读写自动化需要编程能力
	- 无法应对突发事件
- DBMS的种类
	- DBMS主要通过数据的**保存格式（数据库的种类）**来进行分类，现阶段主要有以下5种类型：
		- 层次数据库（Hierarchical Database，HDB）
			- 将数据通过层次结构（树形结构）的方式表
				现出来，现在不常用
		- 关系数据库（Relational Database，RDB）
			- 和Excel 工作表一样，它也采用由行和列组成的二维表来
				管理数据，所以简单易懂。同时，它还使用专门的**SQL（Structured Query Language，结构化查询语言）**对数据进行操作
			- 这种类型的DBMS 称为关系数据库管理系统（Relational Database Management System，RDBMS）。比较具有代表性的RDBMS 有如下5 种：
				- Oracle Database：甲骨文公司的RDBMS（简称为Oracle）
				- SQL Server ：微软公司的RDBMS
				- DB2：IBM 公司的RDBMS
				- PostgreSQL：开源的RDBMS
				-  MySQL ：开源的RDBMS
		- 面向对象数据库（Object Oriented Database，OODB）
			- 将数据以及对数据的操作集合起来以对象为单位进行管理
			- 主要的面向对象语言包括Java和C++等
		- XML数据库（XML Database，XMLDB）
			- eXtensible Markup Language的缩写，一种使用HTML 那样的标签来表现数据结构的语言。以<name> 铃木</name>这样的形式来保存数据
		- 键值存储系统（Key-Value Store，KVS）
			- 单纯用来保存查询所使用的主键（Key）和值（Value）的组合的数据库

## 1-2 数据库的结构

- 使用RDBMS 时，最常见的系统结构就是**客户端/ 服务器类型（C/S**
	**类型）**这种结构

- **服务器**指的是用来接收其他程序发出的请求，并对该请求进行相应处
	理的程序（软件），或者是安装了此类程序的设备（计算机）
- RDBMS 也是一种服务器，它能够从保存在硬盘上的**数据库**中读取数据并返回，还可以把数据变更为指定内容
- 向服务器发出请求的程序（软件），或者是安装了该程序的设备（计算机）称为**客户端**
- RDBMS 客户端将想要获取什么样的数据，或者想对哪些数据进行何种变更等信息通过**SQL 语句**发送给RDBMS 服务器

- 关系数据库通过类似Excel 工作表那样的、由行和列组成的二维表来管理数据。用来管理数据的二维表在关系数据库中简称为**表**
- **根据SQL 语句的内容返回的数据同样必须是二维表的形式**

- 表的**列**（垂直方向）称为**字段**，它代表了保存在表中的数据项目
- 表的**行**（水平方向）称为**记录**，它相当于一条数据
- **关系数据库必须以行为单位进行数据读写**
- 行和列交汇的方格称为**单元格**
- **一个单元格中只能输入一个数据**

## 1-3 SQL概要

- 国际标准化组织（ISO）为SQL 制定了相应的标准，以此为基准的
	SQL 称为**标准SQL**
- SQL 用关键字、表名、列名等组合而成的一条语句（SQL 语句）来
	描述操作的内容
- 根据对RDBMS 赋予的指令种类的不同，SQL 语句可以分为以下三类(其中使用最多的是DML):
	- **DDL（Data Definition Language，数据定义语言）** 用来创建或者删除存储数据用的数据库以及数据库中的表等对象
	- **DML（Data Manipulation Language，数据操纵语言）** 用来查询或者变更表中的记录
	- **DCL（Data Control Language，数据控制语言）** 用来确认或者取消对数据库中的数据进行的变更
- SQL 的基本书写规则
	- SQL 语句要以分号（;）结尾
	- SQL 语句不区分大小写
	- 常数的书写方式是固定的
		- 字符串和日期常数需要使用单引号（'）括起来
		- 数字常数无需加注单引号（直接书写数字即可）
	- 单词需要用半角空格或者换行来分隔

## 1-4 表的创建

- 数据库的创建

	- **CREATE DATABASE 语句**

		```mysql
		CREATE DATABASE <数据库名称>;
		```

		

- 表的创建

	- **CREATE TABLE 语句**

		```mysql
		CREATE TABLE <表名>
		(<列名1> <数据类型> <该列所需约束>,
		<列名2> <数据类型> <该列所需约束>,
		...
		<该表的约束1>, <该表的约束2>,...)
		```

		

- 我们只能使用半角英文字母、数字、下划线（_）作为数据库、表和
	列的名称
- 名称必须以半角英文字母开头
- 在同一个数据库中不能创建两个相同名称的表，在同一个表中也不能创建两个名称相同的列
- **INTEGER型**，用来指定存储整数的列的数据类型（数字型），不能存储小数
- **CHAR型**，CHARACTER（字符）的缩写，用来指定存储字符串的列
	的数据类型（字符型）
- 字符串以**定长字符串**的形式存储在被指定为CHAR 型的列中。所谓
	定长字符串，就是当列中存储的字符串长度达不到最大长度的时候，使用半
	角空格进行补足
- **VARCHAR型**，用来指定存储字符串的**列**的数据类型（字符串类型），也可以通过括号内的数字来指定字符串的长度（最大长度）。但该类型的列是以**可变长字符串**的形式来保存字符串的

	- 即使字符数未达到最大长度，也不会用半角空格补足
- **DATE型**，用来指定存储日期（年月日）的列的数据类型（日期型）
- **约束**是除了数据类型之外，对列中存储的数据进行限制或者追加条件
  的功能
- **NOT NULL约束**，给该列设置了不能输入空白，也就是必须输入数据的约束（如果什么都不输入就会出错）
- **PRIMARY KEY**，用来给列设置**主键约束**

>- PK(Primary Key)主键，一个数据表中只能有一个字段是主键，一般通过主键来索引某一条数据
>- NN(Not Nill)非空，该键的值不能是空的
>- UQ(Unique)值唯一，用用户名来举例，A起名叫张三后，其余所有人就不能叫张三了
>- B(Binary)二进制数据
>- UN(UNsigned)无符号（非负数）
>- ZF(zero fill)填充0，例如字段内容是1，字段类型是int(4)，则内容显示为0001
>- AI(Auto Increment)值自动增长，把这个勾上写入数据的时候不用刻意去传id，每写一条数据id自动增加（如果你想给一个指定的ID也是可以的）
>- G(Generated)勾上后表示该列是基于其他列计算产生的列
>- Default是默认值（可选），有默认值的字段可以刻意去传，也可以不刻意去传
>- Comments是备选（可选）

## 1.5 表的删除和更新

- 表的删除

	- **DROP TABLE 语句**

		```mysql
		DROP TABLE 
		```

		

	- 删除的表是无法恢复的。即使是被误删的表，也无法恢复，只能重新创建，然后重新插入数据。所以执行语句之前务必仔细确认

- 表定义的更新（**ALTER TABLE语句**）

	- 有时好不容易把表创建出来之后才发现少了几列，其实这时无需把表删除再重新创建，只需使用变更表定义的**ALTER TABLE 语句**就可以了

```mysql
ALTER TABLE <表格> ADD COLUMN <列的定义>;
```

- ALTER TABLE语句和DROP TABLE语句一样，执行之后无法恢复。误添的列可以通过ALTER TABLE语句删除，或者将表全部删除之后重新再创建

- 向Product表中插入数据

	```mysql
	-- DML ：插入数据
	BEGIN TRANSACTION;—————————①
	INSERT INTO Product VALUES ('0001', 'T恤衫', '衣服',
	1000, 500, '2009-09-20');
	INSERT INTO Product VALUES ('0002', '打孔器', '办公用品',
	500, 320, '2009-09-11');
	INSERT INTO Product VALUES ('0003', '运动T恤', '衣服',
	4000, 2800, NULL);
	INSERT INTO Product VALUES ('0004', '菜刀', '厨房用具',
	3000, 2800, '2009-09-20');
	INSERT INTO Product VALUES ('0005', '高压锅', '厨房用具',
	6800, 5000, '2009-01-15');
	INSERT INTO Product VALUES ('0006', '叉子', '厨房用具',
	500, NULL, '2009-09-20');
	INSERT INTO Product VALUES ('0007', '擦菜板', '厨房用具',
	880, 790, '2008-04-28');
	INSERT INTO Product VALUES ('0008', '圆珠笔', '办公用品',
	100, NULL,'2009-11-11');
	COMMIT;
	```

	
